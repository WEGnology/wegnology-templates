resourceType: ExperienceFlowVersion
resources:
  - enabled: true
    flowId: ~exportplaceholderid-flow-postOauthCallbackAzuread-1~
    globals: []
    id: ~exportplaceholderid-flowVersion-postOauthCallbackAzuread-1~
    name: POST /oauth/callback/azuread
    nodes:
      - config:
          authCredentials: {}
          authType: none
          bodyFields:
            - keyTemplate: code
              valueTemplate: '{{data.body.code}}'
            - keyTemplate: client_id
              valueTemplate: '{{globals.oauth.microsoft.clientId}}'
            - keyTemplate: client_secret
              valueTemplate: '{{globals.oauth.microsoft.clientSecret}}'
            - keyTemplate: redirect_uri
              valueTemplate: 'https://{{globals.hostname}}/oauth/callback/azuread'
            - keyTemplate: grant_type
              valueTemplate: authorization_code
          bodyType: urlencoded
          caCertTemplate: ''
          disableSSLVerification: false
          encodingTemplate: utf8
          errorBehavior: throw
          errorPath: ''
          headerInfo: []
          method: POST
          requestEncodingTemplate: utf8
          responsePath: working.tkResponse
          timeoutTemplate: ''
          uriTemplate: 'https://login.microsoftonline.com/common/oauth2/v2.0/token'
        id: aTSKyj9D3t
        meta:
          category: data
          description: ''
          label: Get Auth Token
          name: http
          x: 520
          'y': 160
        outputIds:
          - - hSbyJQaZz7
        type: HttpNode
      - config: {}
        id: 8I8M2v_P0y
        meta:
          annotationText: >+
            **Tip**:

            You might want to create an application user based on the social
            login. 

            For that, you will need to check if the user already exists to
            create a new one if it does not.


            > **Do not forget!**

            > 

            > As you are handling the user authentication in a custom way, be
            sure to set the resultant authentication token as a cookie on the
            reply node.

          category: annotation
          height: 260
          label: Note
          name: note
          width: 540
          x: 820
          'y': 160
        outputIds: []
        type: AnnotationNode
      - config:
          rules:
            - destination: working.idTk
              type: set
              valueTemplate: '{{data.body.id_token}}'
              valueTemplateType: string
        id: hSbyJQaZz7
        meta:
          category: logic
          description: ''
          label: Mutate
          name: mutate
          x: 520
          'y': 240
        outputIds:
          - - a7c_z_owyO
        type: MutateNode
      - config:
          authCredentials: {}
          authType: none
          bodyType: none
          caCertTemplate: ''
          disableSSLVerification: false
          encodingTemplate: utf8
          errorBehavior: throw
          errorPath: ''
          headerInfo:
            - key: Authorization
              valueTemplate: 'Bearer {{working.tkResponse.body.access_token}}'
          method: GET
          requestEncodingTemplate: utf8
          responsePath: working.userInfoResponse
          timeoutTemplate: ''
          uriTemplate: 'https://graph.microsoft.com/v1.0/me'
        id: a7c_z_owyO
        meta:
          category: data
          description: ''
          label: Get User Info
          name: http
          x: 520
          'y': 340
        outputIds:
          - - mJqD_Umq6P
        type: HttpNode
      - config:
          emailOrIdTemplate: '{{working.userInfoResponse.body.mail}}'
          findMetadata: false
          findMethod: emailOrId
          findMultiple: false
          resultPath: working.user
          sortDirection: asc
          sortField: email
        id: mJqD_Umq6P
        meta:
          category: experience
          description: ''
          label: 'User: Get'
          name: get-experience-user
          x: 520
          'y': 460
        outputIds:
          - - HMVceXFLPN
        type: GetExperienceUserNode
      - config:
          expression: '{{working.user}} != null'
        id: HMVceXFLPN
        meta:
          category: logic
          description: ''
          label: Exists?
          name: conditional
          x: 520
          'y': 540
        outputIds:
          - - v_acPqzkKu
          - - HMwyQKV9Ci
        type: ConditionalNode
      - config:
          dataMethod: individualFields
          emailTemplate: '{{working.userInfoResponse.body.mail}}'
          firstNameTemplate: '{{working.userInfoResponse.body.givenName}}'
          groupIdTemplates: []
          lastNameTemplate: '{{working.userInfoResponse.body.surname}}'
          passwordTemplate: '{{working.generatedPw}}'
          resultPath: working.userCreation
          userTags: []
        id: dlUPWcvJ1u
        meta:
          category: experience
          description: ''
          label: 'User: Create'
          name: create-experience-user
          x: 400
          'y': 720
        outputIds:
          - - HMwyQKV9Ci
        type: CreateExperienceUserNode
      - config:
          message: ''
          property: ''
        id: dMK5lUsmdp
        meta:
          category: output
          description: ''
          label: Debug
          name: debug
          x: 640
          'y': 1060
        outputIds: []
        type: DebugNode
      - config:
          bodyTemplate: '{{working.userInfoResponse.body}}'
          bodyTemplateType: json
          cookieInfo:
            - maxAgeTemplate: ''
              nameTemplate: authorization
              pathTemplate: /
              valueTemplate: '{{working.authTk}}'
          headerInfo: []
          layoutIdTemplate: ''
          mqttTopicsTemplate: []
          pageIdTemplate: ~exportplaceholderid-experienceView-tlUserSummaryPage-2~
          replyIdPath: ''
          replyType: page
          responseCodeTemplate: '200'
          sameSiteTemplate: ''
        id: 0lFD6xSeOQ
        meta:
          category: output
          description: ''
          label: Success
          mqttTopicsType: []
          name: endpoint-reply
          x: 640
          'y': 1000
        outputIds:
          - - dMK5lUsmdp
        type: EndpointReplyNode
      - config:
          emailOrIdTemplate: '{{working.userInfoResponse.body.mail}}'
          invalidateExistingTokens: false
          resultPath: working.authTk
          treatAsLogin: false
          ttlTemplate: ''
        id: HMwyQKV9Ci
        meta:
          category: experience
          description: ''
          label: Generate Token
          name: experience-user-token
          x: 520
          'y': 820
        outputIds:
          - - O5Uz_qcVq9
        type: ExperienceUserTokenNode
      - config:
          destinationPath: working.generatedPw
          idTypeTemplate: uuidv4
        id: v_acPqzkKu
        meta:
          category: logic
          description: ''
          label: Generate PW
          name: generate-id
          x: 400
          'y': 660
        outputIds:
          - - dlUPWcvJ1u
        type: GenerateIdNode
      - config:
          expression: '{{working.authTk}}'
        id: O5Uz_qcVq9
        meta:
          category: logic
          description: ''
          label: Generated?
          name: conditional
          x: 520
          'y': 900
        outputIds:
          - - gOyCwk3Km_
          - - 0lFD6xSeOQ
        type: ConditionalNode
      - config:
          message: ''
          property: ''
        id: qoNAPJCONE
        meta:
          category: output
          description: ''
          label: Debug
          name: debug
          x: 400
          'y': 1060
        outputIds: []
        type: DebugNode
      - config:
          bodyTemplate: ''
          bodyTemplateType: string
          cookieInfo:
            - maxAgeTemplate: ''
              nameTemplate: authorization
              pathTemplate: /
              valueTemplate: '{{working.authTk}}'
          headerInfo: []
          mqttTopicsTemplate: []
          replyIdPath: ''
          replyType: custom
          responseCodeTemplate: '401'
          sameSiteTemplate: ''
        id: gOyCwk3Km_
        meta:
          category: output
          description: ''
          label: Success
          mqttTopicsType: []
          name: endpoint-reply
          x: 400
          'y': 1000
        outputIds:
          - - qoNAPJCONE
        type: EndpointReplyNode
    triggers:
      - config: {}
        key: ~exportplaceholderid-experienceEndpoint-postOauthCallbackAzuread-0~
        meta:
          category: trigger
          description: ''
          label: Post
          name: endpoint
          uiId: NTknFfj1zS
          x: 520
          'y': 60
        outputIds:
          - - aTSKyj9D3t
        type: endpoint
    version: develop
version: 1
